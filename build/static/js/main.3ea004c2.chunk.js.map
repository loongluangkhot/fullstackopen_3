{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Axios","get","then","res","data","post","id","delete","put","Filter","newFilter","handleFilterChange","value","onChange","PersonForm","newName","handleNameChange","newNum","handleNumChange","handleSubmit","onSubmit","type","Persons","persons","handleDelete","filter","person","name","toLowerCase","includes","map","key","number","onClick","Notification","style","success","backgroundColor","border","borderRadius","color","padding","margin","error","none","hidden","message","App","useState","setPersons","setNewName","setNewNum","setNewFilter","nullNotif","notif","setNotif","useEffect","personsService","handleCreate","concat","showNotif","handleUpdate","existedPerson","window","confirm","notifData","setTimeout","event","input","target","preventDefault","find","personToRemove","catch","err","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3ea004c2.chunk.js","sourcesContent":["import Axios from \"axios\";\r\nconst BASE_URL = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  return Axios.get(BASE_URL).then((res) => res.data);\r\n};\r\n\r\nconst create = (data) => {\r\n  return Axios.post(BASE_URL, data).then((res) => res.data);\r\n};\r\n\r\nconst remove = (id) => {\r\n  return Axios.delete(`${BASE_URL}/${id}`);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return Axios.put(`${BASE_URL}/${id}`, data).then((res) => res.data);\r\n};\r\n\r\nexport default { getAll, create, remove, update };\r\n","import React, { useState, useEffect } from \"react\";\nimport personsService from \"./services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNum, setNewNum] = useState(\"\");\n  const [newFilter, setNewFilter] = useState(\"\");\n  const nullNotif = {\n    type: \"none\",\n    message: null,\n  };\n  const [notif, setNotif] = useState(nullNotif);\n\n  useEffect(() => {\n    personsService.getAll().then((res) => setPersons(res));\n  }, []);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    let existedPerson = persons.find((person) => person.name === newName);\n    if (existedPerson) {\n      handleUpdate(existedPerson);\n      return;\n    }\n\n    handleCreate({\n      name: newName,\n      number: newNum,\n    });\n  };\n\n  const handleCreate = (person) => {\n    personsService.create(person).then((res) => {\n      setPersons(persons.concat(res));\n      setNewName(\"\");\n      setNewNum(\"\");\n      showNotif({\n        type: \"success\",\n        message: `Added ${res.name} to the phonebook!`,\n      });\n    });\n  };\n\n  const handleUpdate = (existedPerson) => {\n    if (\n      window.confirm(\n        `${existedPerson.name} already exists in the phonebook. Would you like to update the record?`\n      )\n    ) {\n      personsService\n        .update(existedPerson.id, {\n          ...existedPerson,\n          number: newNum,\n        })\n        .then((res) => {\n          setPersons(\n            persons.map((person) =>\n              person.id === existedPerson.id ? res : person\n            )\n          );\n          setNewName(\"\");\n          setNewNum(\"\");\n          showNotif({\n            type: \"success\",\n            message: `Updated the number of ${res.name} in the phonebook!`,\n          });\n        });\n    }\n  };\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumChange = (event) => {\n    setNewNum(event.target.value);\n  };\n\n  const handleFilterChange = (event) => {\n    let input = event.target.value;\n    setNewFilter(input);\n  };\n\n  const handleDelete = (personToRemove) => {\n    if (window.confirm(`Delete ${personToRemove.name}?`)) {\n      personsService\n        .remove(personToRemove.id)\n        .then((res) => {\n          setPersons(\n            persons.filter((person) => person.id !== personToRemove.id)\n          );\n          showNotif({\n            type: \"success\",\n            message: `Successfully removed ${personToRemove.name} from the phonebook!`,\n          });\n        })\n        .catch((err) => {\n          showNotif({\n            type: \"error\",\n            message: `${personToRemove.name} does not exist in the phonebook!`,\n          });\n        });\n    }\n  };\n\n  const showNotif = (notifData) => {\n    setNotif(notifData);\n    setTimeout(() => {\n      setNotif(nullNotif);\n    }, 5000);\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification data={notif} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n\n      <h3>Add a new</h3>\n      <PersonForm\n        newName={newName}\n        handleNameChange={handleNameChange}\n        newNum={newNum}\n        handleNumChange={handleNumChange}\n        handleSubmit={handleSubmit}\n      />\n\n      <h3>Numbers</h3>\n      <Persons\n        persons={persons}\n        newFilter={newFilter}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nconst Filter = ({ newFilter, handleFilterChange }) => {\n  return (\n    <div>\n      filter shown with{\" \"}\n      <input value={newFilter} onChange={handleFilterChange} />\n    </div>\n  );\n};\n\nconst PersonForm = ({\n  newName,\n  handleNameChange,\n  newNum,\n  handleNumChange,\n  handleSubmit,\n}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        number: <input value={newNum} onChange={handleNumChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Persons = ({ persons, newFilter, handleDelete }) => {\n  const getFilteredPersons = () => {\n    let filteredPersons = persons.filter((person) =>\n      person.name.toLowerCase().includes(newFilter.toLowerCase())\n    );\n    return filteredPersons.map((person) => (\n      <div key={person.name}>\n        {person.name} {person.number}{\" \"}\n        <button type=\"button\" onClick={() => handleDelete(person)}>\n          Delete\n        </button>\n      </div>\n    ));\n  };\n  return <div>{getFilteredPersons()}</div>;\n};\n\nconst Notification = ({ data }) => {\n  const notifStyle = {\n    success: {\n      backgroundColor: \"#EAEAEA\",\n      border: \"2px solid green\",\n      borderRadius: \"10px\",\n      color: \"green\",\n      padding: \"10px\",\n      margin: \"10px\"\n    },\n    error: {\n      backgroundColor: \"#EAEAEA\",\n      border: \"2px solid red\",\n      borderRadius: \"10px\",\n      color: \"red\",\n      padding: \"10px\",\n      margin: \"10px\"\n    },\n    none: {\n      hidden: true,\n    },\n  };\n\n  return <div style={notifStyle[data.type]}>{data.message}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}